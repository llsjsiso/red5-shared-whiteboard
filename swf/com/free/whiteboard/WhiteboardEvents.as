/**WhiteboardEvents.as
*/


//import com.free.Whiteboard;
import com.free.whiteboard.FreeHandDrawing;
import com.free.whiteboard.FreeHandSO;
import com.free.whiteboard.LineDrawingSO;
import com.free.whiteboard.LineDrawing;
import com.free.whiteboard.ObjectDrawing;
import com.free.whiteboard.TextDrawing;
import com.free.whiteboard.ShapeDrawing;
import com.free.whiteboard.DepthUtils;

/* 
* This is the class which handles all
* the events generated by the application
* 
* @author <a href="mailto:sunil_gupta20801@yahoo.co.in">Sunil Gupta</a>
*/
class com.free.whiteboard.WhiteboardEvents{
	
	public static var connect_NC:NetConnection;
	public var selectedControl:String;
	
	public  var freehanddrawing:FreeHandDrawing;
	public  var linedrawing:LineDrawing;
	public  var textdrawing:TextDrawing;
	public  var objectdrawing:ObjectDrawing;
	public  var shapedrawing:ShapeDrawing;
	
	public var freeHandSO:FreeHandSO;
	public var lineDrawingSO:LineDrawingSO;
	
	private var drawingarea_MC:MovieClip;
	public  var movie_ARR:Array;
	public  var movie_COUNT:Number;
	public static var ref;
	
	private var n = 1000;
	public var clientId;

	public function WhiteboardEvents(){
		movie_ARR = new Array();
		movie_COUNT = 0;
		ref = this;
		selectedControl="none";
		clientId =  String(Math.floor(Math.random()*n));
	}
	
	/**This function will connect the 
	* application to red5 server
	*/
	public function connectServer(){
		connect_NC = new NetConnection();
		
		connect_NC.onStatus = function(info){
			switch(info.code){
		
				case "NetConnection.Connect.Success":
					_global.whiteboard.controlbox_MC._visible = 	true;
					_global.whiteboard.disableThickness();
					_global.whiteboard.disableLineControls();
					_global.whiteboard.disableShapeControls();
					_global.whiteboard.disableTextControls();
					_global.whiteboard.disableFreeHandControls();
					_global.whiteboard.disableObjectControls();
					
					_global.whiteboard.evtHandler.freeHandSO = new FreeHandSO();
					_global.whiteboard.evtHandler.freeHandSO.addFreeHandSO(this, 
						_global.whiteboard.evtHandler.clientId);
					
					_global.whiteboard.evtHandler.lineDrawingSO = new LineDrawingSO();
					_global.whiteboard.evtHandler.lineDrawingSO.addLineDrawingSO(this, 
						_global.whiteboard.evtHandler.clientId);
						
					//mx.controls.Alert.show("Id =========>"+ _global.whiteboard.evtHandler.clientId);
					
					break;
	   			case "NetConnection.Connect.Failed":
					break;
	 	  		case "NetConnection.Connect.Rejected":
					
		   		case "NetConnection.Connect.Closed":
					
					_global.whiteboard.controlbox_MC._visible = 	false;
					
					//Clear and Release all events on whiteboard
					_global.whiteboard.evtHandler.clearDrawing();
					_global.whiteboard.evtHandler.releaseAllObjects();
					_global.whiteboard.evtHandler.selectedControl = "none";
					
					break;
   			}
		};
		connect_NC.connect("rtmp://localhost/Whiteboard", clientId);
		
		_global.whiteboard.connect_BTN._alpha = 100;
		_global.whiteboard.disconnect_BTN._alpha = 50;
	}
	
	/**This function will disconnect the 
	* application to red5 server
	*/
	public function disconnectServer(){
		connect_NC.close();
		
		_global.whiteboard.connect_BTN._alpha = 50;
		_global.whiteboard.disconnect_BTN._alpha = 100;
	}
	
	/**This funtion is responsible for
	* free hand drawing in whiteboard
	*/
	public function freeHandDraw(){
		if(selectedControl == "freehand"){
			return;
		}	
		selectedControl = "freehand";
		
		_global.whiteboard.disableShapeControls();
		_global.whiteboard.disableTextControls();
		_global.whiteboard.disableLineControls();
		_global.whiteboard.disableObjectControls();
		_global.whiteboard.enableFreeHandControls();

		releaseAllObjects();
		freehanddrawing = new FreeHandDrawing(this);
		
		var oldThick = _global.whiteboard.getGlobalThick();
		var oldColor = _global.whiteboard.getGlobalColor();
		
		if(oldThick != -1){
			freehanddrawing.setThickness(oldThick);
		}
		if(oldColor != "none"){
			freehanddrawing.setColor(oldColor);
		}
		
		drawingarea_MC = _global.whiteboard.whiteboard_MC.drawingarea_MC;
		freehanddrawing.applyDrawingOnWhiteboard(drawingarea_MC);
		//trace("Control         "+selectedControl+"::"+ _global.whiteboard.evtHandler.selectedControl);
	}
	
	/**This function will draw line on
	* whiteboard and send event to server
	*/
	public function lineDraw(linetype){
		
		_global.whiteboard.disableShapeControls();
		_global.whiteboard.disableTextControls();
		_global.whiteboard.disableFreeHandControls();
		_global.whiteboard.disableObjectControls();
	
		_global.whiteboard.enableLineControls();
		
		selectedControl = "line";		
		
		releaseAllObjects();
		linedrawing = new LineDrawing(this);
		
		var oldThick = _global.whiteboard.getGlobalThick();
		var oldColor = _global.whiteboard.getGlobalColor();
		
		if(oldThick != -1){
			linedrawing.setThickness(oldThick);
		}
		if(oldColor != "none"){
			linedrawing.setColor(oldColor);
		}
		
		drawingarea_MC = _global.whiteboard.whiteboard_MC.drawingarea_MC;
		if(linetype == "no")
			linedrawing.applyDrawingOnWhiteboard(drawingarea_MC);
		else	
			linedrawing.applyDrawingForArrowLine(drawingarea_MC, linetype);
	}
	
	/**This function will draw circle on
	* whiteboard and send event to server
	*/
	public function circleDraw(){
		
		_global.whiteboard.disableLineControls();
		_global.whiteboard.disableTextControls();
		_global.whiteboard.disableFreeHandControls();
		_global.whiteboard.disableObjectControls();
	 	_global.whiteboard.enableShapeControls();
		
		selectedControl = "circle";
		
		releaseAllObjects();
		shapedrawing = new ShapeDrawing(this,selectedControl);
		
		var oldBorderThick = _global.whiteboard.getGlobalThick();
		var oldFillColor = _global.whiteboard.getGlobalColor();
		var oldBorderColor = _global.whiteboard.getGlobalBorderColor();
		
		if(oldBorderThick != -1){
			shapedrawing.setThickness(oldBorderThick);
		}
		if(oldFillColor != "none"){
			shapedrawing.setFillColor(oldFillColor);
		}
		if(oldBorderColor != "none"){
			shapedrawing.setBorderColor(oldBorderColor);
		}
			
		drawingarea_MC = _global.whiteboard.whiteboard_MC.drawingarea_MC;
		shapedrawing.applyDrawingForCircle(drawingarea_MC);
	}

	/**This function will draw rectangle on
	* whiteboard and send event to server
	*/
	public function rectDraw(){
	
		_global.whiteboard.disableLineControls();
		_global.whiteboard.disableTextControls();
		_global.whiteboard.disableFreeHandControls();
		_global.whiteboard.disableObjectControls();
		_global.whiteboard.enableShapeControls();
		
		selectedControl = "rect";
		
		
		releaseAllObjects();
		shapedrawing = new ShapeDrawing(this,selectedControl);
		
		var oldBorderThick = _global.whiteboard.getGlobalThick();
		var oldFillColor = _global.whiteboard.getGlobalColor();
		var oldBorderColor = _global.whiteboard.getGlobalBorderColor();
			
		if(oldBorderThick != -1){
			shapedrawing.setThickness(oldBorderThick);
		}
		if(oldFillColor != "none"){
			shapedrawing.setFillColor(oldFillColor);
		}
		if(oldBorderColor != "none"){
			shapedrawing.setBorderColor(oldBorderColor);
		}
				
		drawingarea_MC = _global.whiteboard.whiteboard_MC.drawingarea_MC;
		shapedrawing.applyDrawingOnWhiteboard(drawingarea_MC);
	
	}
	
	/**This function will draw traiangle on
	* whiteboard and send event to server
	*/
	public function triangleDraw(){
	
		_global.whiteboard.disableLineControls();
		_global.whiteboard.disableTextControls();
		_global.whiteboard.disableFreeHandControls();
		_global.whiteboard.disableObjectControls();
		_global.whiteboard.enableShapeControls();
			
		if(selectedControl == "circle" || 
			selectedControl =="rect" || 
			selectedControl == "triangle")
				_global.whiteboard.enableThickness();
		
		selectedControl = "triangle";
		
					
		releaseAllObjects();
		shapedrawing = new ShapeDrawing(this,selectedControl);
		
		var oldBorderThick = _global.whiteboard.getGlobalThick();
		var oldFillColor = _global.whiteboard.getGlobalColor();
		var oldBorderColor = _global.whiteboard.getGlobalBorderColor();
		
		if(oldBorderThick != -1){
			shapedrawing.setThickness(oldBorderThick);
		}
		if(oldFillColor != "none"){
			shapedrawing.setFillColor(oldFillColor);
		}
		if(oldBorderColor != "none"){
			shapedrawing.setBorderColor(oldBorderColor);
		}
			
		drawingarea_MC = _global.whiteboard.whiteboard_MC.drawingarea_MC;
		shapedrawing.applyDrawingOnWhiteboard(drawingarea_MC);
			
	//	}
	}
	
	/**This function will write text on
	* whiteboard and send event to server
	*/
	public function textDraw(){
		if(selectedControl == "text"){
			return;
		}	
		selectedControl = "text";
		
		if(selectedControl != "none"){
			//Disable others
			_global.whiteboard.disableLineControls();
			_global.whiteboard.disableShapeControls();
			_global.whiteboard.disableFreeHandControls();
			_global.whiteboard.disableObjectControls();
		}
		_global.whiteboard.enableTextControls();
		
		releaseAllObjects();
		textdrawing = new TextDrawing(this);
		
		var oldFont = _global.whiteboard.getGlobalFontSize();
		var oldColor = _global.whiteboard.getGlobalColor();
		
		textdrawing.setTextFont(oldFont);
		
		if(oldColor != "none"){
			textdrawing.setColor(oldColor);
		}
		
		drawingarea_MC = _global.whiteboard.whiteboard_MC.drawingarea_MC;
		textdrawing.applyDrawingOnWhiteboard(drawingarea_MC);
	}
	
	/**This function will clear all drawing from
	* whiteboard and send event to server
	*/
	public function clearDrawing(){
		//Clear out the drawing board
		for(var mc in drawingarea_MC){
			//trace("=="+typeof(drawingarea_MC[mc]));
			if(typeof(drawingarea_MC[mc]) == "movieclip"){
				drawingarea_MC[mc].removeMovieClip();
				delete drawingarea_MC[mc];
			}	
		}					
	}
	
	/**This function will undo drawing on
	* whiteboard and send event to server
	*/
	public function undoDrawing(){
		
	}
	
	/**This function will redo drawing on
	* whiteboard and send event to server
	*/
	public function redoDrawing(){
		//
	}

	/**This funtion will insert the object
	* on whiteboard and send event to server
	*/
	public function insertObject(movieName:String){
		
		selectedControl = "object";
		//Disable others
		_global.whiteboard.disableLineControls();
		_global.whiteboard.disableShapeControls();
		_global.whiteboard.disableFreeHandControls();
		_global.whiteboard.disableTextControls();

		_global.whiteboard.enableObjectControls();
		
		releaseAllObjects();
		objectdrawing = new ObjectDrawing(this,movieName+"_MC");
		var oldColor = _global.whiteboard.getGlobalColor();
		if(oldColor != "none"){
			objectdrawing.setColor(oldColor);
		}
		
		drawingarea_MC = _global.whiteboard.whiteboard_MC.drawingarea_MC;
		objectdrawing.applyDrawingOnWhiteboard(drawingarea_MC);
	}
	
	/**This function will nullify all the
	* objects created at the time of clicking
	* on a control button
	*/
	public function releaseAllObjects(){
		
		freehanddrawing = null;
		linedrawing = null;
		
		objectdrawing = null;
		textdrawing = null;
		shapedrawing = null;
		//All others as well
		
		//nullify the whiteboard mouse events
		delete drawingarea_MC.onRelease;
		delete drawingarea_MC.onReleaseOutside;
		delete drawingarea_MC.onPress;
		delete drawingarea_MC.onMouseMove;
		delete drawingarea_MC.onRollOver;
		delete drawingarea_MC.onRollOut;
		delete drawingarea_MC.onMouseDown;
		delete drawingarea_MC.onMouseUp;
		
		
		Mouse.addListener(undefined);
	}
}